/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 5>, <&to 5>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <200>;
            flavor = "tap-preferred";
        };

        hmr_fast_typing: hmr_fast_typing {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_FAST_TYPING";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
        };

        ht_longer_time_to_hold: ht_longer_time_to_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LONGER_TIME_TO_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <200>;
            flavor = "tap-preferred";
        };

        j_td: j_td {
            compatible = "zmk,behavior-tap-dance";
            label = "J_TD";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp ESC>;

            tapping-term-ms = <220>;
        };

        j_htd: j_htd {
            compatible = "zmk,behavior-hold-tap";
            label = "J_HTD";
            bindings = <&kp>, <&j_td>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <200>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        forward_pipe: forward_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp GT &kp SPACE>;
            label = "FORWARD_PIPE";
        };

        backward_pipe: backward_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp LT &kp PIPE &kp SPACE>;
            label = "BACKWARD_PIPE";
        };

        fsharp_assignment: fsharp_assignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp LT &kp MINUS &kp SPACE>;
            label = "FSHARP_ASSIGNMENT";
        };

        forward_arrow: forward_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp MINUS &kp GT>;
            label = "FORWARD_ARROW";
        };

        linq_arrow: linq_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp EQUAL &kp GT>;
            label = "LINQ_ARROW";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2      &kp F3          &kp F4                     &kp F5                                                                                           &kp F6          &kp F7                     &kp F8      &kp F9              &kp F10
&kp EQUAL   &kp N1      &kp N2          &kp N3                     &kp N4       &kp N5                                                                      &kp N6  &kp N7          &kp N8                     &kp N9      &kp N0              &kp MINUS
&kp TAB     &kp Q       &kp W           &kp E                      &kp R        &kp T                                                                       &kp Y   &kp U           &kp I                      &kp O       &kp P               &kp BSLH
&kp ESC     &ht LGUI A  &ht LEFT_ALT S  &hmr_fast_typing LSHIFT D  &ht LCTRL F  &kp G                                                                       &kp H   &j_htd RCTRL 0  &hmr_fast_typing RSHIFT K  &ht RALT L  &ht RGUI SEMICOLON  &kp SQT
&kp GRAVE   &kp Z       &kp X           &kp C                      &kp V        &kp B   &kp LSHFT   &kp LCTRL  &layer_td  &to 3     &kp RCTRL  &kp RSHFT    &kp N   &kp M           &kp COMMA                  &kp DOT     &kp FSLH            &kp PG_UP
&magic 6 0  &kp HOME    &kp END         &kp LEFT                   &kp RIGHT            &lt 2 BSPC  &kp DEL    &kp LALT   &kp RALT  &kp RET    &lt 1 SPACE          &kp UP          &kp DOWN                   &kp LBKT    &kp RBKT            &kp PG_DN
            >;
        };

        programmer {
            bindings = <
&none          &none             &none              &none                 &none                                                                                                                              &none               &none           &none         &none     &none
&none          &none             &none              &none                 &none                  &none                                                                                      &none            &none               &none           &none         &none     &none
&kp CARET      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DOLLAR                                                                                 &linq_arrow      &backward_pipe      &forward_pipe   &kp ASTERISK  &none     &none
&kp AMPERSAND  &kp BACKSLASH     &kp MINUS          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SLASH                                                                                  &kp HASH         &kp RCTRL           &kp RSHFT       &kp RALT      &kp LGUI  &none
&kp INSERT     &kp AT            &kp EQUAL          &kp LESS_THAN         &kp GREATER_THAN       &kp EXCLAMATION  &none              &none             &to 0        &trans  &trans  &trans  &kp PRINTSCREEN  &fsharp_assignment  &forward_arrow  &none         &none     &none
&none          &none             &none              &none                 &kp SPACE                               &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp PERCENT  &trans  &trans  &trans                   &none               &none           &none         &none     &none
            >;
        };

        navigation {
            bindings = <
&none  &none     &none         &none           &none                                                                          &none           &none         &none            &none  &none
&none  &none     &none         &none           &none      &none                                               &none           &none           &none         &none            &none  &none
&none  &none     &none         &none           &none      &none                                               &kp LS(TAB)     &kp END         &kp HOME      &kp TAB          &none  &none
&none  &kp LGUI  &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LCTRL  &none                                               &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &none  &none
&none  &none     &none         &none           &none      &none  &none  &none  &none  &trans  &trans  &trans  &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &none  &none
&none  &none     &none         &none           &none             &none  &none  &none  &trans  &trans  &trans                  &kp BSPC        &none         &none            &none  &none
            >;
        };

        rider_layer {
            bindings = <
&none       &none          &none         &none           &none                                                                                       &none        &none          &none          &none  &none
&none       &none          &none         &none           &none          &none                                                       &none            &none        &none          &none          &none  &none
&none       &none          &none         &none           &kp RA(RC(Z))  &kp LC(T)                                                   &none            &kp LS(F12)  &kp F12        &none          &none  &none
&none       &kp RC(RA(A))  &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LCTRL      &kp RA(END)                                                 &kp LS(LC(F12))  &none        &kp LA(LC(K))  &kp LS(LA(L))  &none  &none
&none       &none          &none         &kp RA(RC(C))   &none          &kp LS(LC(B))  &none  &none  &none  &to 0   &trans  &trans  &kp F7           &none        &none          &none          &none  &none
&magic 6 0  &none          &none         &none           &none                         &none  &none  &none  &trans  &trans  &trans                   &none        &none          &none          &none  &none
            >;
        };

        symbol_layer {
            bindings = <
&none      &none           &none                 &none                  &none                                                                                                      &none                 &none             &none              &none                  &none
&none      &kp GRAVE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMI          &kp COMMA                                                                  &none         &none                 &none             &none              &none                  &none
&kp EXCL   &kp LEFT_BRACE  &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES      &kp RIGHT_BRACE   &kp QUESTION                                                               &kp SEMI      &kp RIGHT_SHIFT       &kp RCTRL         &kp RIGHT_ALT      &kp RGUI               &none
&kp HASH   &kp CARET       &kp EQUAL             &kp UNDER              &kp DOLLAR        &kp ASTRK                                                                  &kp PERIOD    &kp BACKSPACE         &kp TAB           &kp SPACE          &kp RETURN             &none
&kp TILDE  &kp LESS_THAN   &kp PIPE              &kp KP_MINUS           &kp GREATER_THAN  &kp SLASH     &kp BACKSLASH  &kp PERIOD  &kp STAR  &trans  &trans  &trans  &kp KP_SLASH  &kp DELETE            &kp RS(TAB)       &none              &none                  &none
&kp AT     &kp AMPERSAND   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PLUS                        &kp PERCENT    &kp COLON   &kp SEMI  &none   &trans  &trans                &kp LEFT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &none
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                    &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 7
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };
};
